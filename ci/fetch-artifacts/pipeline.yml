---
resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final
- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource

resources:
- name: every-two-days
  type: time
  source:
    interval: 48h
- name: config
  type: git
  source:
    uri: ((config-uri))
    branch: master
- name: platform-automation-pivnet
  type: pivnet
  source:
    api_token: ((pivnet-token))
    product_slug: platform-automation
    product_version: 2\.(.*)
    sort_by: semver
- name: opsman-product
  type: gcs
  source:
    regexp: ops-manager-gcp-(.*).yml
    bucket: ((gcs-bucket))
    json_key: |
      ((gcp-credentials))

- name: pks-product
  type: gcs
  source:
    regexp: pivotal-container-service-(.*).pivotal
    bucket: ((gcs-bucket))
    json_key: |
      ((gcp-credentials))

- name: pks-stemcell
  type: gcs
  source:
    regexp: pks-stemcell/light-bosh-stemcell-(.*)-google.*\.tgz
    bucket: ((gcs-bucket))
    json_key: |
      ((gcp-credentials))

- name: harbor-product
  type: gcs
  source:
    regexp: harbor-container-registry-(.*).pivotal
    bucket: ((gcs-bucket))
    json_key: |
      ((gcp-credentials))

- name: harbor-stemcell
  type: gcs
  source:
    regexp: harbor-stemcell/light-bosh-stemcell-(.*)-google.*\.tgz
    bucket: ((gcs-bucket))
    json_key: |
      ((gcp-credentials))

- name: rabbitmq-product
  type: gcs
  source:
    regexp: p-rabbitmq-(.*).pivotal
    bucket: ((gcs-bucket))
    json_key: |
      ((gcp-credentials))

- name: rabbitmq-stemcell
  type: gcs
  source:
    regexp: rabbitmq-stemcell/light-bosh-stemcell-(.*)-google.*\.tgz
    bucket: ((gcs-bucket))
    json_key: |
      ((gcp-credentials))

- name: scs-product
  type: gcs
  source:
    regexp: p-spring-cloud-services-(.*).pivotal
    bucket: ((gcs-bucket))
    json_key: |
      ((gcp-credentials))

- name: scs-stemcell
  type: gcs
  source:
    regexp: scs-stemcell/light-bosh-stemcell-(.*)-google.*\.tgz
    bucket: ((gcs-bucket))
    json_key: |
      ((gcp-credentials))

- name: scs3-product
  type: gcs
  source:
    regexp: p_spring-cloud-services-(.*).pivotal
    bucket: ((gcs-bucket))
    json_key: |
      ((gcp-credentials))

- name: scs3-stemcell
  type: gcs
  source:
    regexp: scs3-stemcell/light-bosh-stemcell-(.*)-google.*\.tgz
    bucket: ((gcs-bucket))
    json_key: |
      ((gcp-credentials))


- name: redis-product
  type: gcs
  source:
    regexp: p-redis-(.*).pivotal
    bucket: ((gcs-bucket))
    json_key: |
      ((gcp-credentials))

- name: redis-stemcell
  type: gcs
  source:
    regexp: redis-stemcell/light-bosh-stemcell-(.*)-google.*\.tgz
    bucket: ((gcs-bucket))
    json_key: |
      ((gcp-credentials))

- name: jenkins-product
  type: gcs
  source:
    regexp: jenkins-(.*).pivotal
    bucket: ((gcs-bucket))
    json_key: |
      ((gcp-credentials))

- name: jenkins-stemcell
  type: gcs
  source:
    regexp: jenkins-stemcell/light-bosh-stemcell-(.*)-google.*\.tgz
    bucket: ((gcs-bucket))
    json_key: |
      ((gcp-credentials))


- name: pasw-product
  type: gcs
  source:
    regexp: pas-windows-(.*).pivotal
    bucket: ((gcs-bucket))
    json_key: |
      ((gcp-credentials))

- name: pasw-stemcell
  type: gcs
  source:
    regexp: pasw-stemcell/light-bosh-stemcell-(.*)-google.*\.tgz
    bucket: ((gcs-bucket))
    json_key: |
      ((gcp-credentials))

- name: pas-product
  type: gcs
  source:
    regexp: srt-(.*).pivotal
    bucket: ((gcs-bucket))
    json_key: |
      ((gcp-credentials))

- name: pas-stemcell
  type: gcs
  source:
    regexp: pas-stemcell/light-bosh-stemcell-(.*)-google.*\.tgz
    bucket: ((gcs-bucket))
    json_key: |
      ((gcp-credentials))

- name: healthwatch-product
  type: gcs
  source:
    regexp: p-healthwatch-(.*).pivotal
    bucket: ((gcs-bucket))
    json_key: |
      ((gcp-credentials))

- name: healthwatch-stemcell
  type: gcs
  source:
    regexp: healthwatch-stemcell/light-bosh-stemcell-(.*)-google.*\.tgz
    bucket: ((gcs-bucket))
    json_key: |
      ((gcp-credentials))

- name: mysql-product
  type: gcs
  source:
    regexp: pivotal-mysql-(.*).pivotal
    bucket: ((gcs-bucket))
    json_key: |
      ((gcp-credentials))

- name: mysql-stemcell
  type: gcs
  source:
    regexp: mysql-stemcell/light-bosh-stemcell-(.*)-google.*\.tgz
    bucket: ((gcs-bucket))
    json_key: |
      ((gcp-credentials))

- name: pcfmetrics-product
  type: gcs
  source:
    regexp: apm-(.*).pivotal
    bucket: ((gcs-bucket))
    json_key: |
      ((gcp-credentials))

- name: pcfmetrics-stemcell
  type: gcs
  source:
    regexp: pcfmetrics-stemcell/light-bosh-stemcell-(.*)-google.*\.tgz
    bucket: ((gcs-bucket))
    json_key: |
      ((gcp-credentials))


- name: platform-automation-tasks
  type: gcs
  source:
    regexp: platform-automation-tasks-(.*).zip
    bucket: ((gcs-bucket))
    json_key: |
      ((gcp-credentials))

- name: platform-automation-image
  type: gcs
  source:
    regexp: platform-automation-image-(.*).tgz
    bucket: ((gcs-bucket))
    json_key: |
      ((gcp-credentials))

jobs:
- name: fetch-opsman
  serial_groups: [ fetch-ops ]
  plan:
  - aggregate:
    - get: every-two-days
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub-ca-cert))
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      PREFIX: /
      INTERPOLATION_PATH: config
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: config
  - task: download-opsman-image
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: config/ops-manager/2.5/gcp/config-pivnet.yml
  - aggregate:
    - put: opsman-product
      params:
        file: downloaded-product/*

- name: fetch-pks
  serial_groups: [ fetch-ops ]
  plan:
  - aggregate:
    - get: every-two-days
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub-ca-cert))
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      PREFIX: /
      INTERPOLATION_PATH: config
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: config
  - task: download-pks-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: config/pivotal-container-service/1.4/config-pivnet.yml
    output_mapping: {downloaded-stemcell: pks-stemcell}
  - aggregate:
    - put: pks-product
      params:
        file: downloaded-product/*.pivotal
    - put: pks-stemcell
      params:
        file: pks-stemcell/*.tgz


- name: fetch-harbor
  serial_groups: [ fetch-ops ]
  plan:
  - aggregate:
    - get: every-two-days
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub-ca-cert))
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      PREFIX: /
      INTERPOLATION_PATH: config
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: config
  - task: download-harbor-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: config/harbor-container-registry/1.7/config-pivnet.yml
    output_mapping: {downloaded-stemcell: harbor-stemcell}
  - aggregate:
    - put: harbor-product
      params:
        file: downloaded-product/*.pivotal
    - put: harbor-stemcell
      params:
        file: harbor-stemcell/*.tgz

- name: fetch-pas
  serial_groups: [ fetch-ops ]
  plan:
  - aggregate:
    - get: every-two-days
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub-ca-cert))
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      PREFIX: /
      INTERPOLATION_PATH: config
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: config
  - task: download-pas-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: config/cf/2.5/config-pivnet.yml
    output_mapping: {downloaded-stemcell: pas-stemcell}
  - aggregate:
    - put: pas-product
      params:
        file: downloaded-product/*.pivotal
    - put: pas-stemcell
      params:
        file: pas-stemcell/*.tgz

- name: fetch-healthwatch
  serial_groups: [ fetch-ops ]
  plan:
  - aggregate:
    - get: every-two-days
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub-ca-cert))
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      PREFIX: /
      INTERPOLATION_PATH: config
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: config
  - task: download-healthwatch-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: config/p-healthwatch/1.4/config-pivnet.yml
    output_mapping: {downloaded-stemcell: healthwatch-stemcell}
  - aggregate:
    - put: healthwatch-product
      params:
        file: downloaded-product/*.pivotal
    - put: healthwatch-stemcell
      params:
        file: healthwatch-stemcell/*.tgz

- name: fetch-jenkins
  serial_groups: [ fetch-ops ]
  plan:
  - aggregate:
    - get: every-two-days
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub-ca-cert))
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      PREFIX: /
      INTERPOLATION_PATH: config
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: config
  - task: download-jenkins-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: config/jenkins/1.0/config-pivnet.yml
    output_mapping: {downloaded-stemcell: jenkins-stemcell}
  - aggregate:
    - put: jenkins-product
      params:
        file: downloaded-product/*.pivotal
    - put: jenkins-stemcell
      params:
        file: jenkins-stemcell/*.tgz


- name: fetch-redis
  serial_groups: [ fetch-ops ]
  plan:
  - aggregate:
    - get: every-two-days
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub-ca-cert))
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      PREFIX: /
      INTERPOLATION_PATH: config
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: config
  - task: download-redis-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: config/p-redis/2.0/config-pivnet.yml
    output_mapping: {downloaded-stemcell: redis-stemcell}
  - aggregate:
    - put: redis-product
      params:
        file: downloaded-product/*.pivotal
    - put: redis-stemcell
      params:
        file: redis-stemcell/*.tgz

- name: fetch-rabbitmq
  serial_groups: [ fetch-ops ]
  plan:
  - aggregate:
    - get: every-two-days
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub-ca-cert))
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      PREFIX: /
      INTERPOLATION_PATH: config
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: config
  - task: download-rabbitmq-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: config/p-rabbitmq/1.16/config-pivnet.yml
    output_mapping: {downloaded-stemcell: rabbitmq-stemcell}
  - aggregate:
    - put: rabbitmq-product
      params:
        file: downloaded-product/*.pivotal
    - put: rabbitmq-stemcell
      params:
        file: rabbitmq-stemcell/*.tgz

- name: fetch-scs
  serial_groups: [ fetch-ops ]
  plan:
  - aggregate:
    - get: every-two-days
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub-ca-cert))
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      PREFIX: /
      INTERPOLATION_PATH: config
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: config
  - task: download-scs-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: config/p-scs/2.0/config-pivnet.yml
    output_mapping: {downloaded-stemcell: scs-stemcell}
  - aggregate:
    - put: scs-product
      params:
        file: downloaded-product/*.pivotal
    - put: scs-stemcell
      params:
        file: scs-stemcell/*.tgz


- name: fetch-scs3
  serial_groups: [ fetch-ops ]
  plan:
  - aggregate:
    - get: every-two-days
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub-ca-cert))
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      PREFIX: /
      INTERPOLATION_PATH: config
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: config
  - task: download-scs-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: config/p-scs/3.0/config-pivnet.yml
    output_mapping: {downloaded-stemcell: scs3-stemcell}
  - aggregate:
    - put: scs3-product
      params:
        file: downloaded-product/*.pivotal
    - put: scs3-stemcell
      params:
        file: scs3-stemcell/*.tgz


- name: fetch-pasw
  serial_groups: [ fetch-ops ]
  plan:
  - aggregate:
    - get: every-two-days
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub-ca-cert))
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      PREFIX: /
      INTERPOLATION_PATH: config
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: config
  - task: download-pasw-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: config/pasw/2.4/config-pivnet.yml
    output_mapping: {downloaded-stemcell: pasw-stemcell}
  - aggregate:
    - put: pasw-product
      params:
        file: downloaded-product/*.pivotal
    - put: pasw-stemcell
      params:
        file: pasw-stemcell/*.tgz

- name: fetch-pcfmetrics
  serial_groups: [ fetch-ops ]
  plan:
  - aggregate:
    - get: every-two-days
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub-ca-cert))
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      PREFIX: /
      INTERPOLATION_PATH: config
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: config
  - task: download-pcfmetrics-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: config/pcfmetrics/1.6/config-pivnet.yml
    output_mapping: {downloaded-stemcell: pcfmetrics-stemcell}
  - aggregate:
    - put: pcfmetrics-product
      params:
        file: downloaded-product/*.pivotal
    - put: pcfmetrics-stemcell
      params:
        file: pcfmetrics-stemcell/*.tgz

- name: fetch-mysql
  serial_groups: [ fetch-ops ]
  plan:
  - aggregate:
    - get: every-two-days
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub-ca-cert))
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      PREFIX: /
      INTERPOLATION_PATH: config
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: config
  - task: download-mysql-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: config/pivotal-mysql/2.5/config-pivnet.yml
    output_mapping: {downloaded-stemcell: mysql-stemcell}
  - aggregate:
    - put: mysql-product
      params:
        file: downloaded-product/*.pivotal
    - put: mysql-stemcell
      params:
        file: mysql-stemcell/*.tgz



- name: fetch-platform-automation
  # We use the pivnet resource to bootstrap the pipeline,
  # and because this product is part of the pipeline, not the foundation
  plan:
  - get: platform-automation-pivnet
    trigger: true
  - aggregate:
    - put: platform-automation-tasks
      params:
        file: platform-automation-pivnet/*tasks*.zip
    - put: platform-automation-image
      params:
        file: platform-automation-pivnet/*image*.tgz